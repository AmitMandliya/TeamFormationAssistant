{"version":3,"sources":["Home.js","Signup.js","ProjectDetails.js","App.js","serviceWorker.js","index.js"],"names":["Home","props","state","data","fetch","then","response","json","setState","newData","this","concat","index","key","ProjectId","ProjectName","MemberId","MemberName","console","log","className","align","to","striped","bordered","hover","map","renderTeam","Component","Signup","name","nameerror","handleChange","e","preventDefault","fields","target","value","validateForm","formflag","errors","bind","alert","formIsValid","match","date","Date","datediff","now","getFullYear","isShow","method","action","onSubmit","contactSubmit","htmlFor","type","onChange","maxLength","required","dob","hourlyrate","defaultValue","experience","skillscore","maxvalue","availablehoursperweek","Notify","ProjectDetails","tempclassname","split","dataset","id","includes","teamMembers","toUpperCase","addmember","prevState","languagepreferred","skill","memberrole","skillweight","experienceweight","hoursweight","languageweight","budgetweight","handleSubmit","count","date2","getMonth","totalweight","parseInt","enddate","teamsize","budget","val","idx","languagepreferredId","skillId","memberroleId","availablehoursperweekId","skillweightId","experienceweightId","hoursweightId","languageweightId","budgetweightId","data-id","max","weight","onClick","App","path","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.8c20aba6.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { NavLink } from \"react-router-dom\";\nimport './Home.css';\nimport * as ReactBootstrap from \"react-bootstrap\";\n\nclass Home extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      data: []\n    };\n\n}\n\n\ncomponentDidMount() {\n  //fetch('http://localhost:5000/executeAlgo');\n  const apiUrl = 'http://localhost:3001/getResults';\n  fetch(apiUrl)\n    .then(response => response.json())\n    .then(data => this.setState({data: data}));\n  var newData = this.state.data.concat([this.state.data]);  \n  this.setState({data: newData})\n    \n}\n\n renderTeam(response, index){\n    return(\n      <tr key={index}>\n        <td>{response.ProjectId}</td>\n        <td>{response.ProjectName}</td>\n        <td>{response.MemberId}</td>\n        <td>{response.MemberName}</td>\n      </tr>\n    )\n  }\n\n  render(){\n    console.log(this.state)\n  return (\n    <div className=\"Home\" align = 'center'>\n      \t<div className=\"headjs\">\n              <div align=\"center\">\n                  <br/>\n                  <NavLink to=\"/TeamFormationAssistant/Home\" className=\"btn btn-primary active\">\n                    Home\n                  </NavLink>\n                  &nbsp;&nbsp;&nbsp;&nbsp;\n                  <NavLink to=\"/TeamFormationAssistant/Signup\" className=\"btn btn-primary\">\n                    Signup\n                  </NavLink>\n                  &nbsp;&nbsp;&nbsp;&nbsp;\n                  <NavLink to=\"/TeamFormationAssistant/ProjectDetails\" className=\"btn btn-primary\">\n                    ProjectDetails\n                  </NavLink>\n                  <h1>Team Formation Assistant</h1>\n                  <p>Helps in forming teams using the team member and project requirements</p>\n                  <br/>\n                  <br/>\n              </div>\n      </div>\n      <br/>\n      <div className=\"midpart\">\n          <h2 align=\"center\">Project Assignments by Assistant</h2>\n      </div>\n      <div className = \"test\">\n        <div className=\"formblock\" align = 'center'>\n            <ReactBootstrap.Table striped bordered hover>\n              <thead className=\"thead-dark\">\n                <tr>\n                  <th>Project ID</th>\n                  <th>Project Name</th>\n                  <th>Member ID</th>\n                  <th>Member Name</th>\n                </tr>\n              </thead>\n              <tbody>\n                {this.state.data.map(this.renderTeam)}\n              </tbody>\n            </ReactBootstrap.Table>\n        </div>\n      </div>\n    </div>\n  );\n  }\n}\nexport default Home;","import React, { Component } from 'react';\nimport { NavLink } from \"react-router-dom\";\nimport './Signup.css';\n\n\nclass Signup extends Component {\n  state ={\n    name: \"\",\n    nameerror:\"\", \n  };\n  constructor(props)\n  {\n    super(props);\n    this.state={\n      formflag: this.props.formflag,\n      fields: {},\n      errors: {}\n    }\n    this.handleChange = this.handleChange.bind(this);\n    // this.submituserRegistrationForm = this.submituserRegistrationForm.bind(this);\n  };\n  handleChange= (e) =>{\n    e.preventDefault();\n    let fields = this.state.fields;\n    fields[e.target.name] = e.target.value;\n    this.setState({\n      fields\n    });\n  //   if (this.validateForm()) {\n  //     this.setState({fields:fields});\n  // }\n\n  this.validateForm();\n\n  }\n  contactSubmit(e){\n    \n\n    if(!this.validateForm()){\n      e.preventDefault();\n       alert(\"Form has errors please correct them\");\n    }\n    \n}\n  validateForm() {\n    let fields = this.state.fields;\n      let errors = {};\n      let formIsValid = true;\n    if (typeof fields[\"name\"] !== \"undefined\") {\n      if (!fields[\"name\"].match(/^[a-zA-Z ]*$/)) {\n        formIsValid = false;\n        // this.state.fields[\"name\"]=\"\";\n        errors[\"name\"] = \"*Please enter alphabet characters only.\";\n      }\n    }\n    var date = new Date(fields[\"dob\"]);\n    var date2 = new Date(Date.now());\n    var datediff = date2.getFullYear()-date.getFullYear();\n    if(datediff<18 || datediff>65){\n      formIsValid = false;\n      // this.state.fields[\"dob\"]=\"\";\n      errors[\"dob\"] = \"*Please enter a valid date.\";\n    }\n    \n    if (fields[\"skillscore\"]<0 || fields[\"skillscore\"]>100) {\n      formIsValid = false;\n      // this.state.fields[\"skillscore\"]=\"\";\n      errors[\"skillscore\"] = \"*Please enter a valid score.\";\n    }\n    if (fields[\"experience\"]<0 || fields[\"experience\"]>30) {\n      formIsValid = false;\n      // this.state.fields[\"experience\"]=0;\n      errors[\"experience\"] = \"*Please enter a valid expereince.\";\n    }\n    if (fields[\"hourlyrate\"]<0 || fields[\"hourlyrate\"]>250) {\n      formIsValid = false;\n      // this.state.fields[\"hourlyrate\"]=\"\";\n      errors[\"hourlyrate\"] = \"*Please enter a realistic hourlyrate.\";\n    }\n    if (fields[\"availablehoursperweek\"]<0 || fields[\"availablehoursperweek\"]>100) {\n      formIsValid = false;\n      // this.state.fields[\"availablehoursperweek\"]=\"\";\n      errors[\"availablehoursperweek\"] = \"*Please enter a realistic available hours per week.\";\n    }\n    this.setState({\n      errors: errors\n    });\n    return formIsValid;\n  }\n  // handleSubmit= event =>{\n  //   event.preventDefault();\n  //   console.log(this.state);\n  // }\n\n  \n  render(){\n  return (\n    <div className=\"Signup\" align = 'center'>\n      <div className=\"headjs\">\n              <div align=\"center\">\n                  <br/>\n                  <NavLink to=\"/TeamFormationAssistant/Home\" className=\"btn btn-primary\">\n                    Home\n                  </NavLink>\n                  &nbsp;&nbsp;&nbsp;&nbsp;\n                  <NavLink to=\"/TeamFormationAssistant/Signup\" className=\"btn btn-primary active\">\n                    Signup\n                  </NavLink>\n                  &nbsp;&nbsp;&nbsp;&nbsp;\n                  <NavLink to=\"/TeamFormationAssistant/ProjectDetails\" className=\"btn btn-primary\">\n                    ProjectDetails\n                  </NavLink>\n                  <h1>Team Formation Assistant</h1>\n                  <p>Helps in forming teams using the team member and project requirements</p>\n                  <br/>\n                  <br/>\n              </div>\n      </div>\n      <br/>\n      <div className=\"midpart\">\n          <h2 align=\"center\">Team Member Details (Sign Up)</h2>\n      </div>\n      <Notify isShow={this.state.formflag} />\n      <div className = \"test\">\n        <div className=\"formblock\">\n          <form method= 'post' align = 'center' action = 'http://localhost:3001/Signup' onSubmit= {this.contactSubmit.bind(this)}>\n              <div className=\"form-row\">\n                <div className=\"form-group col-md-6\">\n                  <label htmlFor=\"name\" className=\"form-check-label\">Name</label>\n                  <input type=\"text\" value={this.state.fields.name} onChange={this.handleChange} className=\"form-control\" name = 'name' maxLength={30} required/>\n                  <div className=\"errorMsg\">{this.state.errors.name}</div>\n                </div>\n                <div className=\"form-group col-md-6\">\n                  <label htmlFor=\"dob\" className=\"form-check-label\">Date of Birth(Min Age = 18)</label>\n                  <input type=\"date\" value={this.state.fields.dob} onChange={this.handleChange} className=\"form-control\" name=\"dob\" required/>\n                  <div className=\"errorMsg\">{this.state.errors.dob}</div>\n                </div>\n              </div>\n              <div className=\"form-row\">\n                <div className=\"form-group col-md-6\">\n                  <label htmlFor=\"languages\" className=\"form-check-label\">Programming Languages</label>\n                  <input type=\"text\" className=\"form-control\" name = 'languages' required />\n                </div>\n                <div className=\"form-group col-md-6\">\n                  <label htmlFor=\"hourlyrate\" className=\"form-check-label\">Hourly Rate (in dollars)</label>\n                  <input type=\"number\" value={this.state.fields.hourlyrate} onChange={this.handleChange} className=\"form-control\" name=\"hourlyrate\" required/>\n                  <div className=\"errorMsg\">{this.state.errors.hourlyrate}</div>\n                </div>\n              </div>\n              <div className=\"form-row\">\n                <div className=\"form-group col-md-6\">\n                  <label htmlFor=\"memberrole\" className=\"form-check-label\">Role</label>\n                  <select name=\"memberrole\" className=\"form-control\"  required>\n                    <option defaultValue>Choose</option>\n                    <option>Frontend Software Engineer</option>\n                    <option>Backend Software Engineer</option>\n                    <option>Full Stack Software-Backend</option>\n                    <option>DevOps Engineer</option>\n                    <option>Data Engineer</option>\n                    <option>Project Manager</option>\n                    <option>Project Lead</option>\n                  </select>\n                </div>\n                <div className=\"form-group col-md-6\">\n                  <label htmlFor=\"experience\" className=\"form-check-label\">Experience (in years)</label>\n                  <input type=\"number\" value={this.state.fields.experience} onChange={this.handleChange} className=\"form-control\" name=\"experience\" required/>\n                  <div className=\"errorMsg\">{this.state.errors.experience}</div>\n                </div>\n              </div>\n              <div className=\"form-row\">\n                <div className=\"form-group col-md-6\">\n                  <label htmlFor=\"skillscore\" className=\"form-check-label\">Skill/Assesment Score(On a scale of 1-100)</label>\n                  <input type=\"number\" value={this.state.fields.skillscore} onChange={this.handleChange} className=\"form-control\" name = 'skillscore' maxvalue={100} required/>\n                  <div className=\"errorMsg\">{this.state.errors.skillscore}</div>\n                </div>\n                <div className=\"form-group col-md-6\">\n                  <label htmlFor=\"availablehoursperweek\" className=\"form-check-label\">Available Hours (per week)</label>\n                  <input type=\"number\" value={this.state.fields.availablehoursperweek} onChange={this.handleChange} className=\"form-control\" name=\"availablehoursperweek\" required/>\n                  <div className=\"errorMsg\">{this.state.errors.availablehoursperweek}</div>\n                </div>\n              </div>\n              <input type = 'submit' onSubmit />\n            </form>\n        </div>\n      </div>\n    </div>\n  );\n  }\n}\n\nconst Notify = ({ isShow }) =>\n  isShow ? <p><h4 align=\"center\" className = \"h4seg\">Form Received. Please visit Home Page after some time to view Project assignment.</h4></p> : null;\n\nexport default Signup;\n","import React, { Component } from \"react\";\nimport { NavLink } from \"react-router-dom\";\nimport \"./ProjectDetails.css\";\n\nclass ProjectDetails extends Component {\n    constructor(props) {\n        super(props);\n        \n        this.state = {\n            count: 0,\n            formflag: this.props.formflag,\n            fields: {},\n            errors: {},\n            teamMembers: [\n                {\n                    languagepreferred: \"\",\n                    skill: \"\",\n                    memberrole: \"\",\n                    availablehoursperweek: \"\",\n                    skillweight: \"\",\n                    experienceweight: \"\",\n                    hoursweight: \"\",\n                    languageweight: \"\",\n                    budgetweight: \"\"\n                }\n            ]\n        };\n        this.handleChange = this.handleChange.bind(this);\n    }\n    handleChange = (e) => {\n        \n        console.log(this.state)\n        var tempclassname = e.target.className.split(\" \");\n        console.log(tempclassname, e.target.dataset.id,e.target.className)\n        if ([\"languagepreferred\", \"skill\", \"memberrole\", \"availablehoursperweek\", \"skillweight\", \"experienceweight\", \"hoursweight\", \"languageweight\", \"budgetweight\"].includes(tempclassname[0]) ) {\n            \n            let teamMembers = [...this.state.teamMembers]\n          teamMembers[e.target.dataset.id][tempclassname[0]] = e.target.value.toUpperCase()\n          this.setState({ teamMembers }, () => console.log(this.state.teamMembers))\n        } else {\n          this.setState({ [e.target.name]: e.target.value.toUpperCase() })\n        }\n        e.preventDefault();\n    let fields = this.state.fields;\n    fields[e.target.name] = e.target.value;\n    this.setState({\n      fields\n    });\n    this.validateForm(); \n      }\n      contactSubmit(e){\n        \n\n        if(!this.validateForm()){\n          e.preventDefault();\n           alert(\"Form has errors,please correct them\");\n        }\n        \n    }\n    \n      validateForm() {\n        let fields = this.state.fields;\n          let errors = {};\n          let formIsValid = true;\n        \n        var date = new Date(fields[\"enddate\"]);\n        var date2 = new Date(Date.now());\n        var datediff = date.getMonth() - date2.getMonth();\n        var totalweight = 0;\n        \n        console.log(totalweight);\n        \n        if(datediff<1){\n            formIsValid = false;\n            // this.state.fields[\"enddate\"]=\"\";\n            errors[\"enddate\"] = \"*Please enter a valid date.(Atleast one month from today)\";\n          }\n          if(fields[\"teamsize\"]<0 || fields[\"teamsize\"]>12){\n            formIsValid = false;\n            // this.state.fields[\"teamsize\"]=\"\";\n            errors[\"teamsize\"] = \"*Please enter a valid teamsize.(0-12)\";\n          }\n          if(fields[\"budget\"]<0 || fields[\"budget\"]>250000000){\n            formIsValid = false;\n            // this.state.fields[\"budget\"]=\"\";\n            errors[\"budget\"] = \"*Please enter a valid budget\";\n          }\n          if(fields[\"skillweight\"]<0 || fields[\"skillweight\"]>100){\n            formIsValid = false;\n            // this.state.fields[\"skillweight\"]=\"\";\n            errors[\"skillweight\"] = \"*Please enter a valid skill weight(0-100)\";\n          }\n          else{\n            totalweight += parseInt( fields[\"skillweight\"]);\n          \n          }\n       \n          if(fields[\"experienceweight\"]<0 || fields[\"experienceweight\"]>100){\n            formIsValid = false;\n            // this.state.fields[\"experienceweight\"]=\"\";\n            errors[\"experienceweight\"] = \"*Please enter a valid experience weight(0-100)\";\n          }\n          else{\n            totalweight += parseInt( fields[\"experienceweight\"]);\n           \n          }\n       \n          if(fields[\"languageweight\"]<0 || fields[\"languageweight\"]>100){\n            formIsValid = false;\n            // this.state.fields[\"languageweight\"]=\"\";\n            errors[\"languageweight\"] = \"*Please enter a valid language weight(0-100)\";\n          }\n          else{\n            totalweight += parseInt( fields[\"languageweight\"]);\n           \n          }\n       \n          if(fields[\"hoursweight\"]<0 || fields[\"hoursweight\"]>100){\n            formIsValid = false;\n            // this.state.fields[\"hoursweight\"]=\"\";\n            errors[\"hoursweight\"] = \"*Please enter a valid hours weight(0-100)\";\n            \n          }\n          else{\n            totalweight += parseInt( fields[\"hoursweight\"]);\n         \n          }\n       \n        if(fields[\"budgetweight\"]<0 || fields[\"budgetweight\"]>100){\n          formIsValid = false;\n          // this.state.fields[\"budgetweight\"]=\"\";\n          errors[\"budgetweight\"] = \"*Please enter a valid budget weight(0-100)\";\n          \n        }\n        else{\n          totalweight += parseInt( fields[\"budgetweight\"]);\n        \n        }\n        \n        if (typeof fields[\"skillweight\"] !== \"undefined\" && typeof fields[\"languageweight\"] !==\"undefined\" && typeof fields[\"budgetweight\"] !== \"undefined\" && typeof fields[\"experienceweight\"] !== \"undefined\" && typeof fields[\"hoursweight\"] !== \"undefined\") {\n          if (totalweight!==100) {\n            formIsValid = false;\n          \n          \n            errors[\"weight\"] = \"*Please enter valid weights(sum must be 100)\";\n          }\n        }\n        \n        this.setState({\n            errors: errors\n          });\n          return formIsValid;\n    }\n    addmember = (e) => {\n        console.log(\"Add member funtion\");\n        console.log(this.state)\n        this.setState((prevState) => ({\n          teamMembers: [...prevState.teamMembers, {\n            languagepreferred: \"\",\n            skill: \"\",\n            memberrole: \"\",\n            availablehoursperweek: \"\",\n            skillweight: \"\",\n            experienceweight: \"\",\n            hoursweight: \"\",\n            languageweight: \"\",\n            budgetweight: \"\"\n        }],\n        }));\n        console.log(\"Add member funtion end\");\n      }\n      handleSubmit = (e) => { e.preventDefault() }\n    render() {\n        let { teamMembers } = this.state\n        return (\n            <div className=\"ProjectDetails\" align=\"center\">\n                <div className=\"headjs\">\n                    <div align=\"center\">\n                        <br />\n                        <NavLink to=\"/TeamFormationAssistant/Home\" className=\"btn btn-primary\">\n                            Home\n                        </NavLink>\n                        &nbsp;&nbsp;&nbsp;&nbsp;\n                        <NavLink to=\"/TeamFormationAssistant/Signup\" className=\"btn btn-primary\">\n                            Signup\n                        </NavLink>\n                        &nbsp;&nbsp;&nbsp;&nbsp;\n                        <NavLink to=\"/TeamFormationAssistant/ProjectDetails\" className=\"btn btn-primary active\">\n                            ProjectDetails\n                        </NavLink>\n                        <h1>Team Formation Assistant</h1>\n                        <p>\n                            Helps in forming teams using the team member and project\n                            requirements\n                        </p>\n                        <br />\n                        <br />\n                    </div>\n                </div>\n                <br />\n                <div className=\"midpart\">\n                    <h2 align=\"center\">Project Details</h2>\n                </div>\n                <Notify isShow={this.state.formflag} />\n                <div className=\"test\">\n                    <div className=\"formblock\">\n                        <form\n                            method=\"post\"\n                            align=\"center\"\n                            onChange={this.handleChange}\n                            onSubmit= {this.contactSubmit.bind(this)}\n                            action = \"http://localhost:3001/ProjectDetails\"\n                            >\n                            <div className=\"form-row\">\n                            <div className=\"form-group col-md-6\">\n                                <label htmlFor=\"name\" className=\"form-check-label\">\n                                Project Name\n                                </label>\n                                <input\n                                    \n                                    type=\"text\"\n                                    value={this.state.fields.name} \n                                    onChange={this.handleChange}\n                                    className=\"form-control\"\n                                    name=\"name\"\n                                    required\n                                    />\n                            </div>\n                            <div className=\"form-group col-md-6\">\n                                <label htmlFor=\"enddate\" className=\"form-check-label\">\n                                Project End Date\n                                </label>\n                                <input\n                                    type=\"date\"\n                                    value={this.state.fields.enddate} \n                                    onChange={this.handleChange}\n                                    className=\"form-control\"\n                                    name=\"enddate\"\n                                    required\n                                    />\n                            </div>\n                            <div className=\"form-group col-md-6\">{this.state.errors.name}</div>\n                            <div className=\"form-group col-md-6\">{this.state.errors.enddate}</div>\n                            </div>\n                            <div className=\"form-row\">\n                            <div className=\"form-group col-md-6\">\n                                <label htmlFor=\"teamsize\" className=\"form-check-label\">\n                                Team Size\n                                </label>\n                                <input\n                                    type=\"number\"\n                                    value={this.state.fields.teamsize} \n                                    onChange={this.handleChange}\n                                    className=\"form-control\"\n                                    name=\"teamsize\"\n                                    required\n                                    />\n                            </div>\n                            <div className=\"form-group col-md-6\">\n                                <label htmlFor=\"budget\" className=\"form-check-label\">\n                                Budget (in dollars)\n                                </label>\n                                <input\n                                    type=\"number\"\n                                    value={this.state.fields.budget} \n                                    onChange={this.handleChange}\n                                    className=\"form-control\"\n                                    name=\"budget\"\n                                    required\n                                    />\n                            </div>\n                            <div className=\"errorMsg\">{this.state.errors.teamsize}</div>\n                            <div className=\"errorMsg\">{this.state.errors.budget}</div>\n                            </div>\n                            <div className=\"form-row\">\n                            <div className=\"form-group col-md-6\">\n                                <label htmlFor=\"tools\" className=\"form-check-label\">\n                                Tools\n                                </label>\n                                <input\n                                    type=\"text\"\n                                    className=\"form-control\"\n                                    name=\"tools\"\n                                    required\n                                    />\n                            </div>\n                            <div className=\"form-group col-md-6\">\n                                <label htmlFor=\"priority\" className=\"form-check-label\">\n                                Priority 0(high) to 4(low)\n                                </label>\n                                <select name=\"priority\" className=\"form-control\" required>\n                                    <option defaultValue>4</option>\n                                    <option>3</option>\n                                    <option>2</option>\n                                    <option>1</option>\n                                    <option>0</option>\n                                </select>\n                            </div>\n                            </div>\n                            {\n                            teamMembers.map((val, idx) => {\n                            let languagepreferredId = `languagepreferred${idx}`,\n                            skillId = `skill${idx}`,\n                            memberroleId = `memberrole${idx}`,\n                            availablehoursperweekId = `availablehoursperweek${idx}`,\n                            skillweightId = `skillweight${idx}`,\n                            experienceweightId = `experienceweight${idx}`,\n                            hoursweightId = `hoursweight${idx}`,\n                            languageweightId = `languageweight${idx}`,\n                            budgetweightId = `budgetweight${idx}`;\n                            return (\n                            <div key={idx} >\n                            <div className=\"test border border-dark rounded\">\n                                <b>Requirements for Team Member {idx + 1}</b>\n                                <div className=\"form-row\">\n                                    <div className=\"form-group col-md-6\">\n                                        <label\n                                        htmlFor={languagepreferredId}\n                                        className=\"form-check-label\"\n                                        >{`Preferred Programming Language`}</label>\n                                        <input\n                                        type=\"text\"\n                                        name={languagepreferredId}\n                                        data-id={idx}\n                                        id={languagepreferredId}\n                                        value={teamMembers[idx].languagepreferred}\n                                        className=\"languagepreferred form-control\"\n                                        />\n                                    </div>\n                                    <div className=\"form-group col-md-6\">\n                                        <label\n                                        htmlFor={skillId}\n                                        className=\"form-check-label\"\n                                        >{`Minimum Skill/Assesment Score(On a scale of 1-100)`}</label>\n                                        <input\n                                        type=\"text\"\n                                        name={skillId}\n                                        data-id={idx}\n                                        id={skillId}\n                                        value={teamMembers[idx].skill}\n                                        className=\"skill form-control\"\n                                        />\n                                    </div>\n                                </div>\n                                <div className=\"form-row\">\n                                    <div className=\"form-group col-md-6\">\n                                        <label\n                                        htmlFor={memberroleId}\n                                        className=\"form-check-label\"\n                                        >{`Role`}</label>\n                                        <input\n                                        type=\"text\"\n                                        name={memberroleId}\n                                        data-id={idx}\n                                        id={memberroleId}\n                                        value={teamMembers[idx].memberrole}\n                                        className=\"memberrole form-control\"\n                                        />\n                                    </div>\n                                    <div className=\"form-group col-md-6\">\n                                        <label\n                                        htmlFor={availablehoursperweekId}\n                                        className=\"form-check-label\"\n                                        >{`Required Hours per Week`}</label>\n                                        <input\n                                        type=\"text\"\n                                        name={availablehoursperweekId}\n                                        data-id={idx}\n                                        id={availablehoursperweekId}\n                                        value={teamMembers[idx].availablehoursperweek}\n                                        className=\"availablehoursperweek form-control\"\n                                        />\n                                    </div>\n                                </div>\n                                <h6>\n                                    <b>\n                                        All weights should sum up to 100. Allocate weight to each category. For example: Skill Weight: 20, Experience Weight: 25, Hours Weight: 15, Language Weight: 0, Budget Weight: 40\n                                    </b>\n                                </h6>\n                                <div className=\"form-row\">\n                                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n                                    <div className=\"form-group col-md-2\">\n                                        <label\n                                        htmlFor={skillweightId}\n                                        className=\"form-check-label\"\n                                        >{`Skill Weight`}</label>\n                                        <input\n                                        type=\"number\"\n                                    \n                                        name=\"skillweight\"\n                                        data-id={idx}\n                                        id={skillweightId}\n                                        value={this.state.fields.skillweight}\n                                        onChange={this.handleChange}\n                                        className=\"skillweight form-control\"\n                                        />\n                                    </div>\n                                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n                                    <div className=\"form-group col-md-2\">\n                                        <label\n                                        htmlFor={experienceweightId}\n                                        className=\"form-check-label\"\n                                        >{`Experience Weight`}</label>\n                                        <input\n                                        type=\"number\"\n                                        \n                                        name=\"experienceweight\"\n                                        data-id={idx}\n                                        id={experienceweightId}\n                                        value={this.state.fields.experienceweight}\n                                        onChange={this.handleChange}\n                                        className=\"experienceweight form-control\"\n                                        />\n                                    </div>\n                                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n                                    <div className=\"form-group col-md-2\">\n                                        <label\n                                        htmlFor={hoursweightId}\n                                        className=\"form-check-label\"\n                                        >{`Hours Weight`}</label>\n                                        <input\n                                        type=\"number\"\n                                      \n                                        name=\"hoursweight\"\n                                        data-id={idx}\n                                        id={hoursweightId}\n                                        value={this.state.fields.hoursweight}\n                                        onChange={this.handleChange}\n                                        className=\"hoursweight form-control\"\n                                        />\n                                    </div>\n                                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n                                    <div className=\"form-group col-md-2\">\n                                        <label\n                                        htmlFor={languageweightId}\n                                        className=\"form-check-label\"\n                                        >{`Language Weight`}</label>\n                                        <input\n                                        type=\"number\"\n                                        max={100}\n                                        name=\"languageweight\"\n                                        data-id={idx}\n                                        id={languageweightId}\n                                        value={this.state.fields.languageweight}\n                                        onChange={this.handleChange}\n                                        className=\"languageweight form-control\"\n                                        />\n                                    </div>\n                                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n                                    <div className=\"form-group col-md-2\">\n                                        <label\n                                        htmlFor={budgetweightId}\n                                        className=\"form-check-label\"\n                                        >{`Budget Weight`}</label>\n                                        <input\n                                        type=\"number\"\n                                      \n                                        name=\"budgetweight\"\n                                        data-id={idx}\n                                        id={budgetweightId}\n                                        value={this.state.fields.budgetweight}\n                                        onChange={this.handleChange}\n                                        className=\"budgetweight form-control\"\n                                        />\n                                    </div>\n                                    <div className=\"errorMsg\">{this.state.errors.skillweight}</div>\n                                    <div className=\"errorMsg\">{this.state.errors.experienceweight}</div>\n                                    <div className=\"errorMsg\">{this.state.errors.hoursweight}</div>\n                                    <div className=\"errorMsg\">{this.state.errors.languageweight}</div>\n                                    <div className=\"errorMsg\">{this.state.errors.budgetweight}</div>\n                                    <div className=\"errorMsg\">{this.state.errors.weight}</div>\n                                </div>\n\n                            </div>\n                            <br/>\n                            </div>\n                            );\n                            })}\n                            <button type = \"button\" onClick={this.addmember} className=\"btn btn-dark\">\n                            Add new member\n                            </button>\n                            <br />\n                            <br />\n                            <br />\n                            <input type=\"submit\" />\n                        </form>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\nconst Notify = ({ isShow }) =>\n    isShow ? (\n        <p>\n            <h4 align=\"center\" className=\"h4seg\">\n                Form Received. Please visit Home Page after some time to view Project\n                assignment.\n      </h4>\n        </p>\n    ) : null;\n\nexport default ProjectDetails;\n","import React, { Component } from 'react';\nimport {\n  Switch,\n  Route\n} from \"react-router-dom\";\nimport Home from './Home';\nimport Signup from './Signup';\nimport ProjectDetails from './ProjectDetails';\nimport './App.css';\n\nclass App extends Component {\n  constructor(props)\n  {\n    super(props);\n    this.state={\n      name:'',\n    }\n  }\n  render(){\n  return (\n    <div>\n    <Switch>\n      {/* If the current URL is /Signup, this route is rendered\n          while the rest are ignored */}\n      <Route path=\"/TeamFormationAssistant/Signup/Success\">\n        <Signup formflag={true}/>\n      </Route>\n      <Route path=\"/TeamFormationAssistant/Signup\">\n        <Signup formflag={false} />\n      </Route>\n      {/* If the current URL is /ProjectDetails, this route is rendered\n          while the rest are ignored */}\n      <Route path=\"/TeamFormationAssistant/ProjectDetails/Success\">\n        <ProjectDetails formflag={true} />\n      </Route>\n      <Route path=\"/TeamFormationAssistant/ProjectDetails\">\n        <ProjectDetails  formflag={false} />\n      </Route>\n\n      {/* If none of the previous routes render anything,\n          this route acts as a fallback.\n\n          Important: A route with path=\"/\" will *always* match\n          the URL because all URLs begin with a /. So that's\n          why we put this one last of all */}\n      <Route path=\"/TeamFormationAssistant\">\n        <Home />\n      </Route>\n    </Switch>\n  </div>\n  );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport {\n  BrowserRouter as Router\n} from \"react-router-dom\";\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render( \n  <Router>\n    <App />\n  </Router>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}